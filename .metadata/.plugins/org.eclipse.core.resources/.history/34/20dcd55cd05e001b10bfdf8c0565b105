<!DOCTYPE html>
<html lang="en">
<head>
  <title>Bootstrap Example</title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
  <style>

input[type=text], select, textarea {
  width: 100%;
  padding: 12px;
  border: 1px solid #ccc;
  border-radius: 4px;
  box-sizing: border-box;
  margin-top: 6px;
  margin-bottom: 16px;
  resize: vertical;
}

input[type=button] {
  background-color: #4CAF50;
  color: white;
  padding: 12px 20px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

input[type=button]:hover {
  background-color: #45a049;
}

.container {
  border-radius: 5px;
  background-color: #f2f2f2;
  padding: 20px;
}

table {
  border-collapse: collapse;
  border-spacing: 0;
  width: 100%;
  border: 1px solid #ddd;
}

th, td {
  text-align: left;
  padding: 16px;
}

tr:nth-child(even) {
  background-color: #f2f2f2;
}
</style>
<script src="https://unpkg.com/react@16/umd/react.production.min.js"></script>
<script src="https://unpkg.com/react-dom@16/umd/react-dom.production.min.js"></script>
<script src="https://unpkg.com/babel-standalone@6.15.0/babel.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<script type="text/babel">
	
	//react를 이용하여 아래의 태그를 문자열처리 없이 그대로 사용해본다(사실 babel 이라는 자바스크립트 라이브러리가 사용)
	//아래의 테이블을 하나의 컴포넌트로 등록하여 재사용할 예정임..
	class TableContent extends React.Component{

		itemClick(board_id){
			return function(){//익명함수를 리턴 해줘야 원할대 수행된다
				console.log("board_id?",board_id);
				getDetail(board_id);//한건 가져오기 ! board_id가 필요함
			}
		}

		render(){
			//return 안에서는 babel의 데이터만 반환해야 한다(로직 작성못함)
			console.log("dataList is ", this.props.dataList);			
			var row=[]; //define empty js array
			for(var i=0;i<this.props.dataList.length;i++){
				var board = this.props.dataList[i];
				row.push(
						<tr>
							<td>{i}</td>
							<td onClick={this.itemClick(board.board_id)}>{board.title}</td>
							<td>{board.writer}</td>
							<td>{board.regdate}</td>
							<td>{board.hit}</td>
						</tr>
				);
			}
	
			//{}로 표시되는 영역은 데이터 영억 jsp로 <%%>와 동일
			return (
				<table>
					<tr>
						<th>No</th>
						<th>제목</th>
						<th>작성자</th>
						<th>등록일</th>
						<th>조회수</th>
					</tr>
					{row}
				</table>	

			)
		}
	}

	$(function(){
		getList();//로드 하자마자 목록가져오기
		$("#bt_regist").click(function(){
			regist();
		});
		$("#bt_list").click(function(){
			getList();
		});
		$("#bt_edit").click(function(){
			if(confirm("수정하시겠어요?")){
				edit();
			}
		});
		$("#bt_del").click(function(){
			if(confirm("삭제하시겠어요?")){
				del();
			}
		});
	});
	function regist(){
		var obj = {};
		obj["title"]=$("#title").val();//작성자
		obj["writer"]=$("#writer").val();//제목
		obj["content"]=$("#content").val();//내용
		
		var jsonString = JSON.stringify(obj);//전송하려면, 직렬화 (데이터를 쪼개는 것)
		console.log(jsonString);
		
		//비동기 방식으로 등록 요청하기
		$.ajax({
			url:"/rest/board",
			type:"POST",
			contentType:"application/json",//을 해줘야 오류안남
			data:jsonString, //스트링화 된 제이슨 데이터
			success:function(responseData){//성공시
				console.log("성공:",responseData);
				getList();//화면 출력
			},
			error :function(hxr, status, error){//실패시
				console.log("에러:",hxr);
				alert(hxr.responseJSON.msg);
			}
		});
	}
	
	//화면 동적 출력
	function getList(){
		//rest server에서 데이터 가져오기 
		$.ajax({
			url:"/rest/board",
			type:"GET",
			success:function(responseData){
				console.log("서버로부터 받은 json배열은 ", responseData);
				//우리가 정의한 컴포넌트를 사용해보자
				ReactDOM.render(<TableContent dataList={responseData} /> , document.getElementById("content-list"));
			
				//상세보기 폼 처리
				$("#content-list").show();//목록 테이블 안보이게
				$(".container").show();//목록 테이블 안보이게
				$("#content-detail").hide();//목록 테이블 안보이게
			},
			error:function(xhr, status, error){
				console.log(xhr);
			}		
		});	
	}


	//한건 가져오기
	function getDetail(board_id){
		$.ajax({
			url:"/rest/board/"+board_id,
			type:"GET",
			success:function(responseData){
				console.log("성공:", responseData);

				//json데이터를 상세보기 폼 양식에 채워 넣자
				$("#board_id").val(responseData.board_id);
				$("#title2").val(responseData.title);
				$("#writer2").val(responseData.writer);
				$("#content2").val(responseData.content);
					
				//상세보기 폼 처리
				$("#content-list").hide();//목록 테이블 안보이게
				$(".container").hide();//목록 테이블 안보이게
				$("#content-detail").show();//목록 테이블 안보이게
			},
			error:function(xhr, status, error){
				console.log("실패:",xhr);
			}
		});
	}

	//삭제 하기
	function del(board_id){
		$.ajax({
			url:"/rest/board/"+board_id,
			type:"",
			
		});
	}
</script>
</head>
<body>

<div class="container-fluid">
  <h1>비동기 반응형 게시판 클라이언트</h1>
   	<div class="row">
   		<div class="col-sm-4" style="background-color:lavender;">
		    <div class="container">
			  <form action="/action_page.php">
			    <input type="text" id="title" placeholder="제목 입력">
			    <input type="text" id="writer" placeholder="작성자 입력">
			    <textarea id="content" placeholder="내용 작성" style="height:200px"></textarea>
			    <input type="button" value="등록하기" id="bt_regist">
			  </form>
			</div>
	    </div>
	    <div class="col-sm-8" style="background-color:lavenderblush;overflow:scroll;height:500px" >
		    <div id="content-list">
		    	
		    </div>
		    <div id="content-detail" style="display:node">
				 <form action="/action_page.php">
					<input type="text" id="title2" placeholder="제목 입력">
					<input type="text" id="writer2" placeholder="작성자 입력">
					<textarea id="content2" placeholder="내용 작성" style="height:200px"></textarea>
					<input type="hidden" id="board_id">
					<input type="button" value="수정하기" id="bt_edit">
					<input type="button" value="삭제하기" id="bt_del">
					<input type="button" value="목록하기" id="bt_list">
				</form>
		    </div>
	    </div>
	  </div>
</div>
    
</body>
</html>
