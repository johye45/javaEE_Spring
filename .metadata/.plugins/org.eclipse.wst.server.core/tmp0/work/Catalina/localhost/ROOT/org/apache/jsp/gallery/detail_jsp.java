/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.61
 * Generated at: 2020-12-24 08:40:16 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.gallery;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.study.springfinal.domain.Gallery;

public final class detail_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.study.springfinal.domain.Gallery");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

	//정말로 포워딩이 요청을 유지햇는지 테스트해보자!!
	Gallery gallery =(Gallery)request.getAttribute("gallery");
	out.print("요청객체에 담겨진 gallery "+ gallery);
		

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("<style>\r\n");
      out.write("body {font-family: Arial, Helvetica, sans-serif;}\r\n");
      out.write("* {box-sizing: border-box;}\r\n");
      out.write("input[type=text], select, textarea {\r\n");
      out.write("  width: 100%;\r\n");
      out.write("  padding: 12px;\r\n");
      out.write("  border: 1px solid #ccc;\r\n");
      out.write("  border-radius: 4px;\r\n");
      out.write("  box-sizing: border-box;\r\n");
      out.write("  margin-top: 6px;\r\n");
      out.write("  margin-bottom: 16px;\r\n");
      out.write("  resize: vertical;\r\n");
      out.write("}\r\n");
      out.write("input[type=button] {\r\n");
      out.write("  background-color: #4CAF50;\r\n");
      out.write("  color: white;\r\n");
      out.write("  padding: 12px 20px;\r\n");
      out.write("  border: none;\r\n");
      out.write("  border-radius: 4px;\r\n");
      out.write("  cursor: pointer;\r\n");
      out.write("}\r\n");
      out.write("input[type=button]:hover {\r\n");
      out.write("  background-color: #45a049;\r\n");
      out.write("}\r\n");
      out.write(".container {\r\n");
      out.write("  border-radius: 5px;\r\n");
      out.write("  background-color: #f2f2f2;\r\n");
      out.write("  padding: 20px;\r\n");
      out.write("}\r\n");
      out.write(".reply-box{\r\n");
      out.write("\tbackground:yellow;\r\n");
      out.write("}\r\n");
      out.write(".reply-list{\r\n");
      out.write("\toverflow:hidden;\r\n");
      out.write("}\r\n");
      out.write(".reply-list p{\r\n");
      out.write("\tfloat:left;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\r\n");
      out.write("<script src=\"https://cdn.ckeditor.com/4.15.1/standard/ckeditor.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("$(function(){\r\n");
      out.write("\tCKEDITOR.replace(\"content\"); //textarea의 id가 content인 컴포넌트를 편집기 스킨으로 변경\r\n");
      out.write("\t\r\n");
      out.write("\t$($(\"input[type='button']\")[0]).click(function(){ //수정버튼\r\n");
      out.write("\t\tedit();//동기방식으로 요청하겠다\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\t$($(\"input[type='button']\")[1]).click(function(){ //삭제버튼\r\n");
      out.write("\t\tdel();//동기방식으로 요청하겠다\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\tgetCommentList(); //댓글 목록 비동기로 가져오기!!!\r\n");
      out.write("});\r\n");
      out.write("//글삭제 요청 \r\n");
      out.write("function del(){\r\n");
      out.write("\tif(confirm(\"삭제하시겠어요?\")){\r\n");
      out.write("\t\t$(\"form\").attr({\r\n");
      out.write("\t\t\taction:\"/gallery/delete\",\r\n");
      out.write("\t\t\tmethod:\"post\" /*form태그 안에 잇는 히든값인 board_id가 전송됨*/\r\n");
      out.write("\t\t});\t\t\r\n");
      out.write("\t\t$(\"form\").submit();\r\n");
      out.write("\t}\r\n");
      out.write("}\r\n");
      out.write("//글수정 요청\r\n");
      out.write("function edit(){\r\n");
      out.write("\t$(\"form\").attr({\r\n");
      out.write("\t\taction:\"/gallery/edit\",\r\n");
      out.write("\t\tmethod:\"post\"\r\n");
      out.write("\t});\t\t\r\n");
      out.write("\t$(\"form\").submit();\r\n");
      out.write("}\r\n");
      out.write("//댓글 목록 가져오기 \r\n");
      out.write("function getCommentList(){\r\n");
      out.write("\t$.ajax({\r\n");
      out.write("\t\turl:\"/comment/list.do\", \r\n");
      out.write("\t\ttype:\"get\", \r\n");
      out.write("\t\tdata:{\r\n");
      out.write("\t\t\tgallery_id : ");
      out.print(gallery.getGallery_id());
      out.write("\r\n");
      out.write("\t\t}, \r\n");
      out.write("\t\tsuccess:function(result){\r\n");
      out.write("\t\t\t//서버에서 전송되어온 데이터는 json 객체가 아닌, 문자열일 뿐이다.. \r\n");
      out.write("\t\t\t// json={name:\"ddd\"}\r\n");
      out.write("\t\t\tconsole.log(result.list.length);\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t//result 에는 서버에서 전송한 json 배열이 들어있다..이 배열을이용하여 아래의 컨텐츠를\r\n");
      out.write("\t\t\t//완성하기!! 4시 10분까지...\r\n");
      out.write("\t\t\t$(\"#list-area\").html(\"\"); //초기화 시킨 후\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tvar tag=\"\";\r\n");
      out.write("\t\t\tfor(var i=0;i<result.list.length;i++){\r\n");
      out.write("\t\t\t\tvar json = result.list[i];\r\n");
      out.write("\t\t\t\ttag+=\"<div class=\\\"reply-list\\\">\";\r\n");
      out.write("\t\t\t\ttag+=\"<p style=\\\"width:75%\\\">\"+json.msg+\"</p>\"; \r\n");
      out.write("\t\t\t\ttag+=\"<p style=\\\"width:15%\\\">\"+json.author+\"</p>\";\r\n");
      out.write("\t\t\t\ttag+=\"<p style=\\\"width:10%\\\">\"+json.cdate+\"</p>\"; \r\n");
      out.write("\t\t\t\ttag+=\"</div>\";\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t$(\"#list-area\").html(tag);  //innerHTML과 동일\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\t\r\n");
      out.write("}\r\n");
      out.write("//현재 페이지가 새로고침 (reloading)되지 않게, 비동기방식으로 등록요청을 시도하자!!\r\n");
      out.write("//순수 js의 ajax를 사용하면 처리가 복잡하므로, jquery-ajax로 처리해보자!!\r\n");
      out.write("function registComment(){\r\n");
      out.write("\t$.ajax({\r\n");
      out.write("\t\turl:\"/comment/regist.do\",\t\r\n");
      out.write("\t\ttype:\"post\",\r\n");
      out.write("\t\tdata:{ \r\n");
      out.write("\t\t\tmsg:$(\"input[name='msg']\").val(),\r\n");
      out.write("\t\t\tauthor:$(\"input[name='author']\").val(),\r\n");
      out.write("\t\t\tgallery_id: ");
      out.print(gallery.getGallery_id());
      out.write("\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\t//피드백은 success로 받는다, 즉 서버에서 에러없이 데이터가 결과값이 전송되면\r\n");
      out.write("\t\t//success 우측에 명시된 익명함수가 동작하게 된다.. \r\n");
      out.write("\t\tsuccess:function(result){\r\n");
      out.write("\t\t\t//alert(\"서버로 부터 받은 결과 데이터 \"+result);\r\n");
      out.write("\t\t\tif(result==1){\r\n");
      out.write("\t\t\t\tgetCommentList();\r\n");
      out.write("\t\t\t}else{\r\n");
      out.write("\t\t\t\talert(\"등록실패\");\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\t\t\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<h3>Contact Form</h3>\r\n");
      out.write("\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("  <form>\r\n");
      out.write("  \t<input type=\"hidden\" name=\"gallery_id\" value=\"");
      out.print(gallery.getGallery_id());
      out.write("\">\r\n");
      out.write("  \t<input type=\"hidden\" name=\"filename\" value=\"");
      out.print(gallery.getFilename());
      out.write("\">\r\n");
      out.write("  \t\r\n");
      out.write("  \t\r\n");
      out.write("    <input type=\"text\" name=\"title\" value=\"");
      out.print(gallery.getTitle());
      out.write("\">\r\n");
      out.write("    <input type=\"text\" name=\"writer\" value=\"");
      out.print(gallery.getWriter());
      out.write("\">\r\n");
      out.write("    <textarea id=\"content\" name=\"content\" style=\"height:200px\">");
      out.print(gallery.getContent() );
      out.write("</textarea>\r\n");
      out.write("    \r\n");
      out.write("    <input type=\"button\" value=\"글수정\">\r\n");
      out.write("    <input type=\"button\" value=\"글삭제\">\r\n");
      out.write("    <input type=\"button\" value=\"목록보기\" onClick=\"location.href='/gallery/list'\">\r\n");
      out.write("\t<div class=\"reply-box\">\r\n");
      out.write("\t\t<input type=\"text\" name=\"msg\" placeholder=\"댓글 입력..\" style=\"width:75%\">\r\n");
      out.write("\t\t<input type=\"text\" name=\"author\" placeholder=\"작성자 입력..\" style=\"width:15%\">\r\n");
      out.write("\t\t<button type=\"button\" onClick=\"registComment()\">댓글등록</button>\r\n");
      out.write("\t</div> \r\n");
      out.write("\t<div id=\"list-area\"></div>\t   \r\n");
      out.write("  </form>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
