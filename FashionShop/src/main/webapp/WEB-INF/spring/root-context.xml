<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!--JNDI등록  :mybatis가 아닌 스프링이 접속 객체를 주도한다. 왜? 스트링이 트랜잭션을 관리하므로-->
	<jee:jndi-lookup 
		id="dataSource" 
		jndi-name="jdbc/oracle"
		resource-ref="true"/>
	
	<!-- 
		각 기술에 맞는 트랜잭션 객체를 등록한다
		ex) Hibername사용시 : HibernateTracsactionManager		
		ex) JDBC사용시 : DataSourceaTracsactionManager
		ex) Mybatis사용시 : DataSourceaTracsactionManager
	 -->
	 <!--dataSource는 oracle인지 mysql인지 구분하기 위해서  -->
	<bean id="dataSourceTransactionManager" 
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource"/>
		
	<!-- Spring JDBC사용시  -->
	<bean id="jdbcTemplate" 
		class="org.springframework.jdbc.core.JdbcTemplate"
		p:dataSource-ref="dataSource"/>	
	
	
	<!-- Mybatis Spring -->
	<!--configLocation:  mybatis의 config파일 위치  -->
		<bean id="sqlSessionFactoryBean" 
		class="org.mybatis.spring.SqlSessionFactoryBean"
		p:dataSource-ref="dataSource"
		p:configLocation="classpath:com/koreait/fashionshop/mybatis/config/config.xml"/>
		
	
	<!-- sqlsessiontemplate등록시 생성자constructor=arg필요>> 팩토리빈 -->
	
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactoryBean"/>
	</bean>	
	
	
	<!-- 모델 영역은 모든 서블릿에서 공용으로 사용할 예정이므로, ServletContext수준에서
			어플리케이션이 가동될때 부터 등록 되엉 있어야 한다 
			model파트 부분만 올리기 >>패키지 구분 잘하기
	-->
	<context:component-scan base-package="com.koreait.fashionshop.model"><!-- FileManager올리기 위해 모두 구해오기 -->
		<!-- Controller제외하고 -->
		<!-- <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/> -->
	</context:component-scan>
	
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	
	<!-- DI와 같이 객체를 인터페이스로 보유하는 방식이 아니라, 공통코드를 외부로 완전히 분리시킨 후
	원하는 시점에 , 공통 코드를 동작시키는 관점지향 프로그래밍을 가리켜 AOP라 부른다 -->
	<!-- 1. 공통코드 이미 어노테이션으로 등록되어ㅣㅇㅆ다. Bell-->
	<!-- @componet로 선언해서 필ㅇ요없음<bean id="bell" class="com.koreait.fashionshop.model.common.Bell"></bean> -->

	<!-- 어느시점에, 어떤 메서드 호출시 공통 코드 동작시킬지 xml로 서술해보자 -->
	<!-- 
	<aop:config>
		bank의 공통 코드인 bell등록 
		<aop:aspect id="bellAspect" ref="bell">
			어떤 메서드 실행시 관여할지 서술 expression="execution(패키지명.클래스(.모든클래스)명메서드명(*모든메서드(**(매개변수))))"
			<aop:pointcut expression="execution(public * com.koreait.fashionshop.model.bank.repository..*(**))" id="bellPointcut"/>
			<aop:after method="ding" pointcut-ref="bellPointcut"/>DAO발동후에 동작할거야!
		</aop:aspect>
	</aop:config> 
	-->
	
	<!-- 방금배운 AOP를 이용하여 트랜잭션 처리에 응용해보자 -->
	<!-- 트랜잭션 설정 -->
	<tx:advice id="txAdvice" transaction-manager="dataSourceTransactionManager"><!-- 트랜잭션 공통코드 정의, jdbc라서 -->
		<tx:attributes><!-- 구체적으로 어떠한 메서드 호출시  -->
			<!-- <tx:method name="send" propagation="REQUIRED" rollback-for="EXception"/> --><!--DAO를 관여하면 Service메서드send, 상위 Exception으로 통일(rollback하게됨),   -->
			<tx:method name="registOrder" propagation="REQUIRED" rollback-for="EXception"/><!--DAO를 관여하면 Service메서드send, 상위 Exception으로 통일(rollback하게됨),   -->
		</tx:attributes>
	</tx:advice>
	
	<!-- 트랜잭션을 적용할 대상 서비스 등록 -->
	<aop:config>
		<!-- expression="execution(패키지명.클래스(.모든클래스)명메서드명(*모든메서드(..(매개변수갯수가 상관없다))))" -->
		<aop:pointcut expression="execution(public * com.koreait.fashionshop.model.payment.service..*(..))" id="txPointcut"/>
		<!-- 			현재 공통코드(bell)가 어디있는지 , 트랜잭션 실행할 지점 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
	</aop:config>
	
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	
</beans>
